# Steps below are a combination of Azure Image Builder and Shared Image Gallery
# Azure Image Builder (AIB) allows for the automated creation of images
# Shared Image Gallery (SIG) allows for storing and replicating the resulting image
#
# The Azure Image Builder piece can be skipped when the goal is to use an existing image and add it to SIG
# Here you can see how you can create an image based on an existing VM: https://docs.microsoft.com/en-us/azure/virtual-machines/image-version-vm-cli
#
# Source: https://docs.microsoft.com/en-us/azure/virtual-machines/linux/image-builder-gallery
subscription="subscription name"
az account set --subscription "$subscription"

# Register Azure Image Builder features.
az feature register --namespace Microsoft.VirtualMachineImages --name VirtualMachineTemplatePreview
az feature show --namespace Microsoft.VirtualMachineImages --name VirtualMachineTemplatePreview -o json | grep state

az provider show -n Microsoft.VirtualMachineImages -o json | grep registrationState
az provider show -n Microsoft.KeyVault -o json | grep registrationState
az provider show -n Microsoft.Compute -o json | grep registrationState
az provider show -n Microsoft.Storage -o json | grep registrationState
az provider show -n Microsoft.Network -o json | grep registrationState

az provider register -n Microsoft.VirtualMachineImages
az provider register -n Microsoft.Compute
az provider register -n Microsoft.KeyVault
az provider register -n Microsoft.Storage
az provider register -n Microsoft.Network

subscriptionID=$(az account show --query id --output tsv)
sigResourceGroup=g_nva-image
location="westcentralus"
sigName=g_nva_gallery
imageDefName=g_nva
runOutputName=g_nva

#Create the resource group
az group create -n $sigResourceGroup -l $location

# create user assigned identity for image builder to access the storage account where the script is located
identityName=aibBuiUserId$(date +'%s')
az identity create -g $sigResourceGroup -n $identityName
imgBuilderCliId=$(az identity show -g $sigResourceGroup -n $identityName -o json | grep "clientId" | cut -c16- | tr -d '",')
imgBuilderId=/subscriptions/$subscriptionID/resourcegroups/$sigResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/$identityName

# this command will download an Azure role definition template, and update the template with the parameters specified earlier.
curl https://raw.githubusercontent.com/danielsollondon/azvmimagebuilder/master/solutions/12_Creating_AIB_Security_Roles/aibRoleImageCreation.json -o aibRoleImageCreation.json
imageRoleDefName="Azure Image Builder Image Def"$(date +'%s')
# update the definition
sed -i -e "s/<subscriptionID>/$subscriptionID/g" aibRoleImageCreation.json
sed -i -e "s/<rgName>/$sigResourceGroup/g" aibRoleImageCreation.json
sed -i -e "s/Azure Image Builder Service Image Creation Role/$imageRoleDefName/g" aibRoleImageCreation.json

# create role definitions
az role definition create --role-definition ./aibRoleImageCreation.json

# grant role definition to the user assigned identity
az role assignment create \
    --assignee $imgBuilderCliId \
    --role "$imageRoleDefName" \
    --scope /subscriptions/$subscriptionID/resourceGroups/$sigResourceGroup

# create shared image gallery
az sig create \
    -g $sigResourceGroup \
    --gallery-name $sigName

# create image definition
az sig image-definition create \
   -g $sigResourceGroup \
   --gallery-name $sigName \
   --gallery-image-definition $imageDefName \
   --publisher FTA \
   --offer GenericNVA \
   --sku 18.04-LTS \
   --os-type Linux

#only needed first time, rename file as you see fit.
curl https://raw.githubusercontent.com/danielsollondon/azvmimagebuilder/master/quickquickstarts/1_Creating_a_Custom_Linux_Shared_Image_Gallery_Image/helloImageTemplateforSIG.json -o helloImageTemplateforSIG.json
sed -i -e "s/<subscriptionID>/$subscriptionID/g" helloImageTemplateforSIG.json
sed -i -e "s/<rgName>/$sigResourceGroup/g" helloImageTemplateforSIG.json
sed -i -e "s/<imageDefName>/$imageDefName/g" helloImageTemplateforSIG.json
sed -i -e "s/<sharedImageGalName>/$sigName/g" helloImageTemplateforSIG.json
sed -i -e "s/<region1>/$location/g" helloImageTemplateforSIG.json
#sed -i -e "s/<region2>/$additionalregion/g" helloImageTemplateforSIG.json
sed -i -e "s/<runOutputName>/$runOutputName/g" helloImageTemplateforSIG.json
sed -i -e "s%<imgBuilderId>%$imgBuilderId%g" helloImageTemplateforSIG.json
#remove unnecessary items from the customize step as well as the replicate to region2 from template

# Create the template
az resource create \
    --resource-group $sigResourceGroup \
    --properties @imageTemplateforSIG.json \
    --is-full-object \
    --resource-type Microsoft.VirtualMachineImages/imageTemplates \
    -n g_nva-image

# start the image build
az resource invoke-action \
     --resource-group $sigResourceGroup \
     --resource-type  Microsoft.VirtualMachineImages/imageTemplates \
     -n g_nva-image \
     --action Run

#test the created image
az vm create \
  --resource-group $sigResourceGroup \
  --name myAibGalleryVM \
  --admin-username aibuser \
  --location $location \
  --image "/subscriptions/$subscriptionID/resourceGroups/$sigResourceGroup/providers/Microsoft.Compute/galleries/$sigName/images/$imageDefName/versions/latest" \
  --generate-ssh-keys

#add additional region
az sig image-version update \
--resource-group $sigResourceGroup \
--gallery-name $sigName \
--gallery-image-definition $imageDefName \
--gallery-image-version 0.1.0 \
--add publishingProfile.targetRegions  name=eastus2


# Important
# these steps are required for the VWAN integration to work.

#SIG Gallery ID
sigid=$(az sig show -g $sigResourceGroup --gallery-name $sigName --query id -o tsv)

#fixed well known values
gatewayRP_appid="486c78bf-a0f7-45f1-92fd-37215929e116"
prodnextGWMKV_appid="f6f9bf50-8786-4efb-a1c6-776f770b4b65"

#not necessary SP already exists
gatewayRP_objectid=$(az ad sp show --id $gatewayRP_appid --query objectId -o tsv)
az role assignment create --assignee $gatewayRP_objectid --role "Reader" --scope $sigid

#SP does not exists
az ad sp create --id $prodnextGWMKV_appid
prodnextGWMKV_objectid=$(az ad sp show --id $prodnextGWMKV_appid --query objectId -o tsv)
az role assignment create --assignee $prodnextGWMKV_objectid --role "Reader" --scope $sigid


# Update Image
#get the image version we want to update
sigDefImgVersionId=$(az sig image-version list \
   -g $sigResourceGroup \
   --gallery-name $sigName \
   --gallery-image-definition $imageDefName \
   --subscription $subscriptionID --query [].'id' -o json | grep 0. | tr -d '"' | tr -d '[:space:]')

#get identity used previously
imgBuilderId=$(az identity list -g $sigResourceGroup --query "[?contains(name, 'aibBuiUserId')].id" -o tsv)

az resource create \
    --resource-group $sigResourceGroup \
    --properties @imageTemplateforSIG_v2.json \
    --is-full-object \
    --resource-type Microsoft.VirtualMachineImages/imageTemplates \
    -n g_nva-image_v3

az resource invoke-action \
     --resource-group $sigResourceGroup \
     --resource-type  Microsoft.VirtualMachineImages/imageTemplates \
     -n g_nva-image_v3 \
     --action Run

#debug
az image builder show --name g_nva-image_v3 --resource-group $sigResourceGroup

$runOutputName=g_nva
az resource show \
    --ids "/subscriptions/$subscriptionID/resourcegroups/$sigResourceGroup/providers/Microsoft.VirtualMachineImages/imageTemplates/g_nva-image_v2/runOutputs/$runOutputName"  \
    --api-version=2019-05-01-preview