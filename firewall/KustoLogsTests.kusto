let ApplicationRules = datatable(TimeGenerated: datetime, msg_s: string, Category: string, type: string)
    [
    datetime(2015-12-31 23:59:59.9),"HTTP request from 10.0.10.10:36154 to crl.microsoft.com:80. Url: crl.microsoft.com/pkiinfra/CRL/AME Infra CA 02.crl. Action: Testing. Policy: Test policy. Rule Collection Group: TestRules. Rule Collection: AppRules. Rule: AllowWeb", "AzureFirewallApplicationRule", "new with policy",
    datetime(2015-12-31 23:59:59.9),"HTTP request from 10.0.10.10:36154 to crl.microsoft.com:80. Url: crl.microsoft.com/pkiinfra/CRL/AME Infra CA 02.crl. Action: Testing. Rule Collection: AppRules. Rule: AllowWeb", "AzureFirewallApplicationRule", "new without policy",
    datetime(2015-12-31 23:59:59.9),"HTTP request from 10.0.10.10:36154 to crl.microsoft.com:80. Url: crl.microsoft.com/pkiinfra/CRL/AME Infra CA 02.crl. Action: Testing.", "AzureFirewallApplicationRule", "old",
    datetime(2015-12-31 23:59:59.9),"HTTP request from 10.0.10.10:36154 to crl.microsoft.com:80. Url: crl.microsoft.com/pkiinfra/CRL/AME Infra CA 02.crl. Action: Allow. Policy: test001. Rule Collection Group: TestRules. Rule Collection: AppRules. Rule: AllowWeb. Web Category: some category", "AzureFirewallApplicationRule", "new with web category",
    datetime(2015-12-31 23:59:59.9),"HTTP request from 10.0.10.10:36154 to crl.microsoft.com:80. Url: crl.microsoft.com/pkiinfra/CRL/AME Infra CA 02.crl. Action: Allow. Rule Collection: AppRules. Rule: AllowWeb. Web Category: some category", "AzureFirewallApplicationRule", "new with web category no policy",    
    datetime(2015-12-31 23:59:59.9),"HTTP request from 10.0.10.10:36154 to crl.microsoft.com:80. Url: crl.microsoft.com/pkiinfra/CRL/AME Infra CA 02.crl. Action: Allow.", "AzureFirewallApplicationRule", "old",
    datetime(2015-12-31 23:59:59.9),"HTTPS request from 10.0.10.10:47022 to gcs.prod.monitoring.core.windows.net:443. Action: Deny. No rule matched. Proceeding with default action", "AzureFirewallApplicationRule", "new/old - default rule",
    datetime(2015-12-31 23:59:59.9),"HTTPS request from 10.0.1.7:16239. Action: Deny. Reason: SNI TLS extension was missing.", "AzureFirewallApplicationRule", "old/new - reason", 
    datetime(2015-12-31 23:59:59.9),"HTTPS request from 10.0.10.10:43196 to test.gersner.com:443. Action: Allow. Rule Collection: test002:TestRules:AppRules. Rule: AllowWeb",  "AzureFirewallApplicationRule", "old nwoth policy"
    ];
ApplicationRules
 | where Category == "AzureFirewallApplicationRule"
//this first parse statement is valid for all entries as they all start with this format
| parse msg_s with Protocol " request from " SourceIP ":" SourcePort:int * 
//Parse action as this is the same for all log lines 
| parse kind=regex flags=U msg_s with * ". Action\\: " Action "\\."
// case1: Action: A. Reason: R.
| parse kind=regex flags=U msg_s with "\\. Reason\\: " Reason "\\."
//case 2a: to FQDN:PORT Url: U. Action: A. Policy: P. Rule Collection Group: RCG. Rule Collection: RC. Rule: R.
| parse msg_s with * "to " FQDN ":" TargetPort:int * "." *
//Parse policy if present
| parse msg_s with * ". Policy: " Policy ". Rule Collection Group: " RuleCollectionGroup "." *
| parse msg_s with * " Rule Collection: "  RuleCollection ". Rule: " Rule
//case 2.b: Web Category: WC.
| parse Rule with * ". Web Category: " WebCategory
//case 3: No rule matched. Proceeding with default action"
| extend DefaultRule = iff(msg_s contains "No rule matched. Proceeding with default action", true, false)
| extend 
SourcePort = tostring(SourcePort),
TargetPort = tostring(TargetPort)
| extend 
    Action = case(Action == "","N/A", case(DefaultRule, "Deny" ,Action)),
    FQDN = case(FQDN == "", "N/A", FQDN),
    TargetPort = case(TargetPort == "", "N/A", tostring(TargetPort)),
    Policy = case(RuleCollection contains ":", split(RuleCollection, ":")[0] ,case(Policy == "", "N/A", Policy)),
    RuleCollectionGroup = case(RuleCollection contains ":", split(RuleCollection, ":")[1], case(RuleCollectionGroup == "", "N/A", RuleCollectionGroup)),
    RuleCollection = case(RuleCollection contains ":", split(RuleCollection, ":")[2], case(RuleCollection == "", "N/A", RuleCollection)),
    WebCategory = case(WebCategory  == "", "N/A", WebCategory),
    Rule = case(Rule == "" , "N/A", case(WebCategory == "N/A", Rule, split(Rule, '.')[0])),
    Reason = case(Reason == "", case(DefaultRule, "No rule matched - default action", "N/A"), Reason )
| project TimeGenerated, msg_s, Protocol, SourceIP, SourcePort, FQDN, TargetPort, Action, Policy, RuleCollectionGroup, RuleCollection, Rule, Reason ,WebCategory

let NetworkRules = datatable(TimeGenerated: datetime,msg_s: string, operationName: string, Category: string, Comment: string)
    [
    datetime(2015-12-31 23:59:59.9),"TCP request from 109.67.243.36:58524 to 52.176.240.136:8888 was DNAT'ed to 10.0.10.10:22","AzureFirewallNatRuleLog",  "AzureFirewallNetworkRule", "old",
    datetime(2015-12-31 23:59:59.9),"TCP request from 109.67.243.36:58524 to 52.176.240.136:8888 was DNAT'ed to 10.0.10.10:22. Rule Collection: dnatrules. Rule: dnatpublic","AzureFirewallNatRuleLog",  "AzureFirewallNetworkRule", "new no policy",
    datetime(2015-12-31 23:59:59.9),"TCP request from 109.67.243.36:58524 to 52.176.240.136:8888 was DNAT'ed to 10.0.10.10:22. Policy: test001. Rule Collection Group: TestRules. Rule Collection: dnatrules. Rule: dnatpublic","AzureFirewallNatRuleLog",  "AzureFirewallNetworkRule", "new with policy",
    datetime(2015-12-31 23:59:59.9),"ICMP request from 10.0.2.4 to 10.0.3.4. Action: Allow", "AzureFirewallNatRuleLog", "AzureFirewallNetworkRule", "old",
    datetime(2015-12-31 23:59:59.9),"ICMP request from 10.0.2.4 to 10.0.3.4. Action: Allow. Policy: test001. Rule Collection Group: TestRules. Rule Collection: dnatrules. Rule: dnatpublic","AzureFirewallNatRuleLog", "AzureFirewallNetworkRule", "new with policy",
    datetime(2015-12-31 23:59:59.9),"ICMP request from 10.0.2.4 to 10.0.3.4. Action: Allow. Rule Collection: dnatrules. Rule: dnatpublic", "AzureFirewallNatRuleLog", "AzureFirewallNetworkRule", "new no policy",
    ];
NetworkRules
| where Category == "AzureFirewallNetworkRule"
| where operationName == "AzureFirewallNatRuleLog" or operationName == "AzureFirewallNetworkRuleLog"
//case 1: for records that look like this:
//PROTO request from IP:PORT to IP:PORT.
| parse msg_s with Protocol " request from " SourceIP ":" SourcePortInt: int " to " TargetIP ":" TargetPortInt: int *
//case 1a: for regular network rules
| parse kind=regex flags=U msg_s with * ". Action\\: " Action1a "\\."
//case 1b: for NAT rules
//TCP request from IP:PORT to IP:PORT was DNAT'ed to IP:PORT
| parse msg_s with * " was " Action1b: string " to " TranslatedDestination: string ":" TranslatedPort: int *
//Parse rule data if present
| parse msg_s with * ". Policy: " Policy ". Rule Collection Group: " RuleCollectionGroup "." *
| parse msg_s with * " Rule Collection: "  RuleCollection ". Rule: " Rule 
//case 2: for ICMP records
//ICMP request from 10.0.2.4 to 10.0.3.4. Action: Allow
| parse msg_s with Protocol2 " request from " SourceIP2 " to " TargetIP2 ". Action: " Action2
| extend
    SourcePort = tostring(SourcePortInt),
    TargetPort = tostring(TargetPortInt)
| extend 
    Action = case(Action1a == "", case(Action1b == "", Action2, Action1b), split(Action1a, ".")[0]),
    Protocol = case(Protocol == "", Protocol2, Protocol),
    SourceIP = case(SourceIP == "", SourceIP2, SourceIP),
    TargetIP = case(TargetIP == "", TargetIP2, TargetIP),
    //ICMP records don't have port information
    SourcePort = case(SourcePort == "", "N/A", SourcePort),
    TargetPort = case(TargetPort == "", "N/A", TargetPort),
    //Regular network rules don't have a DNAT destination
    TranslatedDestination = case(TranslatedDestination == "", "N/A", TranslatedDestination), 
    TranslatedPort = case(isnull(TranslatedPort), "N/A", tostring(TranslatedPort)),
    //Rule information
    Policy = case(Policy == "", "N/A", Policy),
    RuleCollectionGroup = case(RuleCollectionGroup == "", "N/A", RuleCollectionGroup),
    RuleCollection = case(RuleCollection == "", "N/A", RuleCollection),
    Rule = case(Rule == "", "N/A", Rule)
| project TimeGenerated, msg_s, Protocol, SourceIP, SourcePort, TargetIP, TargetPort, Action, TranslatedDestination, TranslatedPort, Policy, RuleCollectionGroup, RuleCollection, Rule


