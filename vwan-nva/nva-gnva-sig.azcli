
#subscription="Azure CXP FTA Internal Subscription THOVUY SETSPN"
subscription="Azure CXP FTA Internal Subscription THOVUY SIG"

#select subscription
az account set --subscription "$subscription"

rg=thovuy-gnva
location=westcentralus
username=$(whoami)
public_ssh_key=$(more ~/.ssh/id_rsa.pub)
gnva_cloudinit="nva-cloudinit.txt"

vwan=thovuy-vwan
hub=thovuy-hub
nva=thovuy-nva

az group create -n $rg -l $location
az network vwan create -n $vwan -g $rg -l $location
az network vhub create -n $hub --address-prefix 192.168.2.0/24 -g $rg --vwan $vwan -l $location

hub_id=$(az network vhub show -n $hub -g $rg --query id -o tsv)
az network vhub show -n $hub -g $rg

# Create cloudinit file
cat <<EOF > $gnva_cloudinit
#cloud-config
users:
  - default
  - name: $username
    sudo: ["ALL=(ALL) NOPASSWD:ALL"]
    ssh-authorized-keys:
     - $public_ssh_key
packages:
  - jq
runcmd:
  - apt update
  - UCF_FORCE_CONFOLD=1 DEBIAN_FRONTEND=noninteractive apt install -y bird strongswan
  - sysctl -w net.ipv4.ip_forward=1
  - sysctl -w net.ipv4.conf.all.accept_redirects = 0 
  - sysctl -w net.ipv4.conf.all.send_redirects = 0
EOF
cloudinit_string=$(cat $gnva_cloudinit | python3 -c 'import json, sys; print( json.dumps( sys.stdin.read() ) )')

#base64 is not needed
#base64_cloudinit=$(cat $gnva_cloudinit | base64 -w 0)
#echo $base64_cloudinit | base64 -d
#this doesn't work?
az network virtual-appliance create --name $nva -g $rg \
     --scale-unit 2 \
     --vendor Contoso_generic_test_nva \
     --version latest \
     --vhub $hub_id \
     --asn 65100 \
     --init-config $cloudinit_string \
     --verbose \
     --tags accountName="sp-d" accountKey="xyz"

#
# gnva over REST API
#
# REST
json_payload='{
  "properties": {
    "nvaSku": {
      "vendor": "Contoso_generic_test_nva",
      "bundledScaleUnit": "2",
      "marketPlaceVersion": "latest"
    },
    "virtualHub": {
      "id": "'$hub_id'"
    },
    "virtualApplianceAsn": 65100,
    "cloudInitConfiguration": '$cloudinit_string'
  },
  "location": "'$location'",
  "tags": {
    "tagexample1": "tagvalue1"
  }
}'
uri="/subscriptions/bb0a98e0-34e3-40d1-856f-899c5203df01/resourceGroups/${rg}/providers/Microsoft.Network/NetworkVirtualAppliances/${nva}?api-version=2021-02-01"
az rest --method PUT --uri $uri --body "$json_payload"

#clean up/operation commands
az network virtual-appliance delete --name $nva -g $rg 
az network vhub delete -n $hub -g $rg
az network vwan delete -n $vwan -g $rg
az group delete --name $rg --yes

az group list -o table
az network virtual-appliance show --name $nva -g $rg 

az network vhub show -n $hub -g $rg --query routingState -o tsv

#
# VMSS for debugging
#
rg=test-vmss-gnva
az group create --name $rg --location $location
az vmss create \
   --resource-group $rg \
   --name gnvavmss \
   --custom-data $gnva_cloudinit \
   --authentication-type all \
   --admin-username $username \
   --admin-password Microsoft123! \
   --image "/subscriptions/bb0a98e0-34e3-40d1-856f-899c5203df01/resourceGroups/g_nva-image/providers/Microsoft.Compute/galleries/g_nva_gallery/images/g_nva/versions/0.1.0" 

#
# ARM template with VMSS
#
#new image
az deployment group create -g $rg --template-file ./vmss-arm-template/template.json --parameters ./vmss-arm-template/parameters.json #--parameters adminPublicKey=$sshkey
#current mp image
az deployment group create -g $rg --template-file ./vmss-arm-template/template_current.json --parameters ./vmss-arm-template/parameters.json #--parameters adminPublicKey=$sshkey

#gnva onboarding
{
  "Publisher": "Contoso",
  "Offer": "Contoso_Test_NVA",
  "Vendor": "Contoso_generic_test_nva",
  "Sku": "Contoso_generic_test_nva",
"SkuType": "test",
"ImageGalleryUri": "/subscriptions/bb0a98e0-34e3-40d1-856f-899c5203df01/resourceGroups/g_nva-image/providers/Microsoft.Compute/galleries/g_nva_gallery/images/g_nva/versions/0.1.0",
  "Properties": {
  "AvailableVersions": [ "0.1.0", "latest" ],
"AvailableScaleUnits": [
{
"ScaleUnit": "2",
"VmSku": "Standard_D2_v2",
"InstanceCount": "2"
}
],
  "AllowedInboundPorts": [ "22, 500,4500" ],
  "AllowedOutboundPorts": [ "*" ]
}
}

# request GNVA

resources.azure.com/raw

API 2021-02-01

PUT https://management.azure.com/subscriptions/bb0a98e0-34e3-40d1-856f-899c5203df01/resourceGroups/az-vwangnva2/providers/Microsoft.Network/networkVirtualAppliances/gnva3?api-version=2020-07-01

{ 
    "properties": { 
        "nvaSku": { 
            "vendor": "Contoso_generic_test_nva", 
            "bundledScaleUnit": "2", 
            "marketPlaceVersion": "latest" 
        }, 
        "virtualHub": { 
            "id": "/subscriptions/bb0a98e0-34e3-40d1-856f-899c5203df01/resourceGroups/az-vwangnva/providers/Microsoft.Network/virtualHubs/we-hub2"
        }, 
        "virtualApplianceAsn": 64512,        
        "cloudInitConfiguration": "#cloud-config\nusers:\n  - default\n  - name: azadmin    \n    sudo: ['ALL=(ALL) NOPASSWD:ALL']\n    ssh-authorized-keys:\n      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+OLyFTWdhcfLkKIWRbwbMdXsmlqEZFH2sJfQgWlw+yrqJumnZ18K1K7RKISvXiaa2Ij/cmts1exwzf/OHwwiIGYxliL77wRvxYu52CXw2KmWTfp8YXcwhXZFXtiKHYAIQvEhVYOtShR5labsz1fsWMcBKRuxvmMvZuaRt4Rl3q20m1sfNgnL300CI2E5tkCEcvUKadVA5IU6hbEQBqYZzaKjP+ra2WqjkOZ8dSraOQB1COfRmXncLl4wImuNyORDFhbfD89yX+Xp1od7Earz6MrjPG1irddcD5Zd4qYMyfCeUqad3awxmWmO4H11lzYBz8w9CBLUh0Aio/3mmuFid\n"
    }, 
    "id": "/subscriptions/bb0a98e0-34e3-40d1-856f-899c5203df01/resourceGroups/az-vwangnva2/providers/Microsoft.Network/networkVirtualAppliances/gnva3", 
    "name": "gnva3", 
    "type": "Microsoft.Network/NetworkVirtualAppliances", 
    "location": "westcentralus" 
} 


az network virtual-appliance create --name $nva -g $rg \
     --scale-unit 2 \
     --vendor Contoso_generic_test_nva \
     --version latest \
     --vhub $hub \
     --asn 65100 \
     --init-config "$single_line" \
     --tags accountName="sp-d" accountKey="xyz"


json_payload='{
  "properties": {
    "nvaSku": {
      "vendor": "Contoso_generic_test_nva",
      "bundledScaleUnit": "2",
      "marketPlaceVersion": "latest"
    },
    "virtualHub": {
      "id": "'$hub_id'"
    },
    "virtualApplianceAsn": 65100  
  },
  "location": "'$location'",
  "tags": {
    "tagexample1": "tagvalue1"
  }
}'


