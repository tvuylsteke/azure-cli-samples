log syslog all;
router id 10.1.2.10;
protocol device {
        scan time 10;
}
protocol direct {
      disabled;
}
protocol kernel {
      preference 254;
      learn;
      merge paths on;
      #are there any routes we want to learn from kerntel -> bgp?
      import filter {
          reject;
      };
      # we don't want our own static routes, but everything else is fair game
      export where source !=  RTS_STATIC;
}
protocol static localranges{
      import all;
      route 2.2.2.2/32 via 10.1.2.10; #dummy route to prove propagation is working
      route 10.11.2.10/32 via 10.1.2.1; #ensure bird has a route to the next hop for the routes pointing to the other NVA
      route 10.2.0.0/16 via 10.1.2.10; #route for the spokes connected to this NVA
}

template bgp routeserver {
      description "BGP to RS";
      multihop;
      local 10.1.2.10 as 65001;
      import filter {
        reject;
      };
      export filter {
        if proto = "nvahub2" then accept;
        if proto = "localranges" then accept;
        else reject;
      };
}

protocol bgp rs1 from routeserver {
     neighbor 10.1.0.4 as 65515;
}

protocol bgp rs2 from routeserver {
     neighbor 10.1.0.5 as 65515;
}

protocol bgp nvahub2 {
      description "BGP to NVAHUB2";
      multihop;
      local as 65001;
      neighbor 10.11.2.10 as 65002;
      import filter {accept;};
      export filter {
        if proto = "routeserver" then accept;
        if proto = "localranges" then accept;
        else reject;
      };
}

#example filters
#if net ~ 10.11.0.4/32 then accept;
#if proto = "routeserver" then accept;
#if net = 10.1.0.0/16 then reject;
#RTS_STATIC RTS_BGP
#export where source !=  RTS_STATIC;
#export filter {accept;};